        Exercises
        
    1. Write a for loop to access elements in an array in the reverse order.
    
    const int arrSize = 5;
    int arr[arrSize] = {12, -45, 74, 89, 0};
    for(int i = arrSize - 1; i >= 0; i--)
    {
        std::cout << arr[arrSize] << ' ';
    }
    
    
    2. Write a nested loop equivalent of Listing 6.14 that adds elements in two arrays, but
    in reverse order.
    
    const int size1 = 3;
    const int size2 = 2;
    int arr1[size1] = {4, 5, 6};
    int arr2[size2] = {7, 8};
    for(int i = size1 - 1; i >= 0; i--)
    {
        for(int j = size2 - 1; j >=0; j--)
        {
            std::cout << arr1[i] * arr2[j] << std::endl;
        }
    }
    
    
    3. Write a program that displays Fibonacci numbers similar to Listing 6.16 but asks
        the user how many numbers she wants to compute.
        
    int q = 0;
	do {
		std::cin >> q;
	} while (q <= 2);
		double num1 = 0;
		double num2 = 1;
		std::cout << num1 << ' ' << num2 << ' ';
		for (int i = 2; i < q; i++)
		{
			double tmp = num1;
			num1 = num2;
			num2 += tmp;
			std::cout << num2 << ' ';
		}
        
        
    4. Write a switch-case construct that tells if a color is in the rainbow or otherwise.
    Use enumerated constants.
    
    enum rainbowColors { red = 0, orange, yellow, green, blue, indigo, violet};
	int n;
	std::cin >> n;
	switch (n)
	{
		case red:
			std::cout << "Red is in the rainbow!" << std::endl;
			break;
		case orange:
			std::cout << "Orange is in the rainbow!" << std::endl;
			break;
		case yellow:
			std::cout  << "Yellow is in the rainbow!" << std::endl;
			break;
		case green:
			std::cout  << "Green is in the rainbow!" << std::endl;
			break;
		case blue:
			std::cout  << "Blue is in the rainbow!" << std::endl;
			break;
		case indigo:
			std::cout  << "Indigo is in the rainbow!" << std::endl;
			break;
		case violet:
			std::cout  << "Violet is in the rainbow!" << std::endl;
			break;
		default:
			std::cout << "Inserted color is not in the rainbow!" << std::endl;
	}
	return 0;
