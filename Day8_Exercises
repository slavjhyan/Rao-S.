//1. Իրականացնել ֆակտորիալի հաշվարկումը ռեկուրսիվ եղանակով։

#include<iostream>
int fact(int);
int main()
{
	int num;
	std::cin >> num;
	std::cout << fact(num) << std::endl;
	return 0;
}
int fact(int x)
{
	if (x <= 1)
	{
		return 1;
	}
	return x * fact(x - 1);
}




//2. Իրականացնել ֆակտորիալ իհաշվարկումը իտերատիվ եղանակով:

#include<iostream>
int factIter(int);
int main()
{
	int num;
	std::cin >> num;
	std::cout << factIter(num) << std::endl;
	return 0;
}
int factIter(int x)
{
	int ans = 1;
	for (int i = 1; i <= x; i++)
	{
		ans *= i;
	}
	return ans;
}





//3. Գրել ֆունկցիա, որը որպես արգումենտ ստանում է num ամբողջ տիպի փոփոխականը եւ տպում է num-ից մինչեւ 0 արժեքները։ Ֆունկցիան իրականացնել ռեկուրսիվ տարբերակով:

#include<iostream>
void printNumToZero(int);
int main()
{
	int num;
	std::cin >> num;
	printNumToZero(num);
	return 0;
}
void printNumToZero(int x)
{
	if (x >= 0)
	{
		std::cout << x << ' ';
		printNumToZero(x - 1);
	}
}



//4. Նախորդ խնդրի ֆունկցիան իրականացնել իտերատիվ տարբերակով։

#include<iostream>
int main()
{
	int num;
	std::cin >> num;
	for (int i = num; i >= 0; --i)
	{
		std::cout << i << ' ';
	}
	return 0;
}




//5. Գրել Ֆիբոնաչիի n-րդ թիվը հաշվող ֆունկցիա ռեկուրսիվ տարբերակով

#include<iostream>
int fib(int);
int main()
{
	int num;
	std::cin >> num;
	std::cout << fib(num) << std::endl;
	return 0;
}
int fib(int x)
{
	if (x <= 2)
		return 1;
	return fib(x - 1) + fib(x - 2);
}





//6. Գրել Ֆիբոնաչիի n-րդ թիվը հաշվող ֆունկցիա իտերատիվ տարբերակով։

#include<iostream>
int main()
{
	int x = 0;
	std::cin >> x;
	int num1 = 1;
	int num2 = 1;
	for (int i = 3; i <= x; ++i)
	{
		int tmp = num1;
		num1 = num2;
		num2 = num1 + tmp;
	}
	x = num2;
	std::cout << x << std::endl;
	return 0;
}




//7. Գրել ֆունկցիա, որը ստանում է զանգված եւ տպում է զանգվածի տարրերը էկրանին ռեկուրսիվ տարբերակով

#include<iostream>
void printArr(int*, int);
int main()
{
	const int size = 4;
	int arr[size] = { 1, 2, 3, 4 };
	printArr(arr, size);
	return 0;
}
void printArr(int* arr, int n)
{
	if (n > 1)
	{
		printArr(arr, n - 1);
	}
	std::cout << arr[n - 1] << ' ';
	return;
}




//8. Գրել ֆունկցիա, որը ստանում է տող եւ վերադարձնում տողի շրջված տարբերակը։

#include<iostream>
void printArr(int*, int);
void reverseArr(int*, int);
int main()
{
	int size;
	std::cin >> size;
	int* arr = new int[size];
	for (int i = 0; i < size; i++)
	{
		std::cin >> arr[i];
	}
	reverseArr(arr, size);
	printArr(arr, size);
	delete[] arr;
	return 0;
}
void printArr(int* arr, int n)
{
	if (n > 1)
	{
		printArr(arr, n - 1);
	}
	std::cout << arr[n - 1] << ' ';
	return;
}
void reverseArr(int* arr, int n)
{
	for (int i = 0; i < n / 2; i++)
	{
		int tmp = arr[i];
		arr[i] = arr[n - 1 - i];
		arr[n - 1 - i] = tmp;
	}
}




//9. Գրել ֆունկցիա, որը ստանում է զանգված եւ ինդեքսի համար։ Ֆունկցիան հեռացնում է զանգվածի տրված ինդեքսով տարրը եւ վերադարձնում նոր զանգվածը որպես արդյունք:

#include<iostream>
void printArr(int*, int);
int* deleteElem(int*, int&, int);
int main()
{
	int size;
	std::cin >> size;
	int* arr = new int[size];
	for (int i = 0; i < size; i++)
	{
		std::cin >> arr[i];
	}
	int ix = 0;
	std::cin >> ix;
	arr = deleteElem(arr, size, ix);
	printArr(arr, size);
	delete[] arr;
	return 0;
}
void printArr(int* arr, int n)
{
	if (n > 1)
	{
		printArr(arr, n - 1);
	}
	std::cout << arr[n - 1] << ' ';
	return;
}
int* deleteElem(int* arr, int& size, int ix)
{
	for (int i = ix; i < size - 1; i++)
	{
		int tmp = arr[i];
		arr[i] = arr[i + 1];
		arr[i + 1] = tmp;
	}
	size--;
	int* newArr = new int[size];
	for (int i = 0; i < size; i++)
	{
		newArr[i] = arr[i];
	}
	return newArr;
}






//10. Գրել ֆունկցիա, որը վերադարձնում է թվի առաջին k թվանշանները։ Թիվն ու k-ն մուտքագրել։

#include<iostream>
#include<cmath>
int rmDgts(int, int);
int main()
{
	int num;
	int k;
	std::cin >> num >> k;
	int ans = rmDgts(num, k);
	std::cout << ans << std::endl;
	return 0;
}
int rmDgts(int num, int x)
{
	int numDig = 0;
	int numcpy = num;
	while (numcpy != 0)
	{
		numcpy /= 10;
		numDig++;
	}
	int toRemove = numDig - x;
	num /= pow(10, toRemove);
	return num;
}
